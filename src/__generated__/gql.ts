/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation LoginUser($username: String!, $password: String!) {\n    login(\n      input: {\n        clientMutationId: \"login123\"\n        username: $username\n        password: $password\n      }\n    ) {\n      authToken\n      refreshToken\n      user {\n        id\n        email\n        username\n      }\n    }\n  }\n": typeof types.LoginUserDocument,
    "\n  mutation RegisterUser(\n    $username: String!\n    $email: String!\n    $password: String!\n  ) {\n    registerUser(\n      input: {\n        username: $username\n        email: $email\n        password: $password\n        clientMutationId: \"register\"\n      }\n    ) {\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n": typeof types.RegisterUserDocument,
    "\n  mutation CreateOrder($input: CreateOrderInput!) {\n    createOrder(input: $input) {\n      order {\n        databaseId\n        orderKey\n        status\n      }\n    }\n  }\n": typeof types.CreateOrderDocument,
    "\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(input: $input) {\n      user {\n        id\n        email\n        username\n        firstName\n        lastName\n      }\n    }\n  }\n": typeof types.UpdateUserDocument,
    "\n  mutation UpdateUserPassword($id: ID!, $password: String!) {\n    updateUser(input: {\n      id: $id,\n      password: $password\n    }) {\n      user {\n        name\n      }\n    }\n  }\n": typeof types.UpdateUserPasswordDocument,
    "\n  query GetAllCategories {\n    productCategories(first: 100) {\n      nodes {\n        id\n        name\n        slug\n        display\n      }\n    }\n  }\n": typeof types.GetAllCategoriesDocument,
    "\n      query GetOrderById($id: Int) {\n        orders(where: { customerId: $id }) {\n          nodes {\n            orderNumber\n            date\n            status\n            total\n\n            lineItems {\n        nodes {\n          quantity\n          total\n          variation {\n            node {\n              name \n              image{\n                sourceUrl\n              }\n              attributes {\n                nodes {\n                  name     \n                  value   \n                }\n              }\n            }\n          }\n          \n          product {\n            node {\n              name     \n              slug\n              image {\n                sourceUrl\n              }\n            }\n          }\n        }\n      }\n            billing {\n              firstName\n              lastName\n              address1\n              city\n              country\n              email\n              phone\n            }\n          }\n        }\n      }\n": typeof types.GetOrderByIdDocument,
    "\n  query GetProductsByTag($tag: [String]) {\n    products(first: 4, where: { tagIn: $tag }) {\n      nodes {\n        id\n        name\n        slug\n        description\n        averageRating\n        shortDescription\n        image {\n          sourceUrl\n          altText\n        }\n\n        ... on SimpleProduct {\n          price\n          regularPrice\n          salePrice\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n        }\n        ... on VariableProduct {\n          price\n          regularPrice\n          salePrice\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetProductsByTagDocument,
    "\n  query GetProductsByCategory($categoryIn: [String]) {\n    products(where: { categoryIn: $categoryIn }) {\n      nodes {\n        id\n        name\n        slug\n        description\n        averageRating\n        shortDescription\n        image {\n          sourceUrl\n          altText\n        }\n\n        ... on SimpleProduct {\n          price\n          regularPrice\n          salePrice\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n        }\n        ... on VariableProduct {\n          price\n          regularPrice\n          salePrice\n          productCategories {\n            nodes {\n              name\n              slug\n            }\n          }\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n          attributes {\n            nodes {\n              name\n              options\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetProductsByCategoryDocument,
    "\n  query GetProductBySlug($slug: ID!) {\n    product(id: $slug, idType: SLUG) {\n      id\n      databaseId\n      name\n      slug\n      description\n      shortDescription\n      averageRating\n      image {\n        sourceUrl\n        altText\n      }\n      ... on VariableProduct {\n        id\n        price\n        regularPrice\n        salePrice\n        sku\n        stockStatus\n        galleryImages {\n          nodes {\n            sourceUrl\n            altText\n          }\n        }\n        variations(first: 100) {\n          nodes {\n            id\n            name\n            price\n            regularPrice\n            description\n            image {\n              altText\n              sourceUrl\n            }\n            sku\n            stockStatus\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetProductBySlugDocument,
    "\n  query GetLatestProducts {\n    products(first: 10, where: { orderby: { field: DATE, order: DESC } }) {\n      nodes {\n        ... on SimpleProduct {\n          id\n          name\n          date\n          slug\n          price\n          regularPrice\n          image {\n            sourceUrl\n          }\n        }\n        ... on VariableProduct {\n          averageRating\n          id\n          name\n          date\n          slug\n          regularPrice\n          price\n          image {\n            sourceUrl\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetLatestProductsDocument,
    "\n  query GetVariations($id: ID!) {\n    product(id: $id) {\n      ... on VariableProduct {\n        variations {\n          nodes {\n            databaseId\n            name\n            price\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetVariationsDocument,
    "\n  query GetProductReviews($slug: ID!) {\n    product(id: $slug, idType: SLUG) {\n      reviews {\n        nodes {\n          id\n          content\n          rating\n          author {\n            node {\n              name\n            }\n          }\n          date\n        }\n      }\n    }\n  }\n": typeof types.GetProductReviewsDocument,
    "\n  mutation CreateProductReview($input: CreateProductReviewInput!) {\n    createProductReview(input: $input) {\n      comment {\n        id\n        content\n        rating\n      }\n    }\n  }\n": typeof types.CreateProductReviewDocument,
    "\n  query GetAllPaAttributes {\n    allPaColor {\n      nodes {\n        name\n        slug\n      }\n    }\n    allPaSize {\n      nodes {\n        name\n        slug\n      }\n    }\n  }\n": typeof types.GetAllPaAttributesDocument,
    "\n  query GetCurrentUser {\n    viewer {\n      id\n      databaseId\n      email\n      username\n      name\n      firstName\n      lastName\n      roles {\n        nodes {\n          name\n        }\n      }\n    }\n  }\n": typeof types.GetCurrentUserDocument,
};
const documents: Documents = {
    "\n  mutation LoginUser($username: String!, $password: String!) {\n    login(\n      input: {\n        clientMutationId: \"login123\"\n        username: $username\n        password: $password\n      }\n    ) {\n      authToken\n      refreshToken\n      user {\n        id\n        email\n        username\n      }\n    }\n  }\n": types.LoginUserDocument,
    "\n  mutation RegisterUser(\n    $username: String!\n    $email: String!\n    $password: String!\n  ) {\n    registerUser(\n      input: {\n        username: $username\n        email: $email\n        password: $password\n        clientMutationId: \"register\"\n      }\n    ) {\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n": types.RegisterUserDocument,
    "\n  mutation CreateOrder($input: CreateOrderInput!) {\n    createOrder(input: $input) {\n      order {\n        databaseId\n        orderKey\n        status\n      }\n    }\n  }\n": types.CreateOrderDocument,
    "\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(input: $input) {\n      user {\n        id\n        email\n        username\n        firstName\n        lastName\n      }\n    }\n  }\n": types.UpdateUserDocument,
    "\n  mutation UpdateUserPassword($id: ID!, $password: String!) {\n    updateUser(input: {\n      id: $id,\n      password: $password\n    }) {\n      user {\n        name\n      }\n    }\n  }\n": types.UpdateUserPasswordDocument,
    "\n  query GetAllCategories {\n    productCategories(first: 100) {\n      nodes {\n        id\n        name\n        slug\n        display\n      }\n    }\n  }\n": types.GetAllCategoriesDocument,
    "\n      query GetOrderById($id: Int) {\n        orders(where: { customerId: $id }) {\n          nodes {\n            orderNumber\n            date\n            status\n            total\n\n            lineItems {\n        nodes {\n          quantity\n          total\n          variation {\n            node {\n              name \n              image{\n                sourceUrl\n              }\n              attributes {\n                nodes {\n                  name     \n                  value   \n                }\n              }\n            }\n          }\n          \n          product {\n            node {\n              name     \n              slug\n              image {\n                sourceUrl\n              }\n            }\n          }\n        }\n      }\n            billing {\n              firstName\n              lastName\n              address1\n              city\n              country\n              email\n              phone\n            }\n          }\n        }\n      }\n": types.GetOrderByIdDocument,
    "\n  query GetProductsByTag($tag: [String]) {\n    products(first: 4, where: { tagIn: $tag }) {\n      nodes {\n        id\n        name\n        slug\n        description\n        averageRating\n        shortDescription\n        image {\n          sourceUrl\n          altText\n        }\n\n        ... on SimpleProduct {\n          price\n          regularPrice\n          salePrice\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n        }\n        ... on VariableProduct {\n          price\n          regularPrice\n          salePrice\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetProductsByTagDocument,
    "\n  query GetProductsByCategory($categoryIn: [String]) {\n    products(where: { categoryIn: $categoryIn }) {\n      nodes {\n        id\n        name\n        slug\n        description\n        averageRating\n        shortDescription\n        image {\n          sourceUrl\n          altText\n        }\n\n        ... on SimpleProduct {\n          price\n          regularPrice\n          salePrice\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n        }\n        ... on VariableProduct {\n          price\n          regularPrice\n          salePrice\n          productCategories {\n            nodes {\n              name\n              slug\n            }\n          }\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n          attributes {\n            nodes {\n              name\n              options\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetProductsByCategoryDocument,
    "\n  query GetProductBySlug($slug: ID!) {\n    product(id: $slug, idType: SLUG) {\n      id\n      databaseId\n      name\n      slug\n      description\n      shortDescription\n      averageRating\n      image {\n        sourceUrl\n        altText\n      }\n      ... on VariableProduct {\n        id\n        price\n        regularPrice\n        salePrice\n        sku\n        stockStatus\n        galleryImages {\n          nodes {\n            sourceUrl\n            altText\n          }\n        }\n        variations(first: 100) {\n          nodes {\n            id\n            name\n            price\n            regularPrice\n            description\n            image {\n              altText\n              sourceUrl\n            }\n            sku\n            stockStatus\n          }\n        }\n      }\n    }\n  }\n": types.GetProductBySlugDocument,
    "\n  query GetLatestProducts {\n    products(first: 10, where: { orderby: { field: DATE, order: DESC } }) {\n      nodes {\n        ... on SimpleProduct {\n          id\n          name\n          date\n          slug\n          price\n          regularPrice\n          image {\n            sourceUrl\n          }\n        }\n        ... on VariableProduct {\n          averageRating\n          id\n          name\n          date\n          slug\n          regularPrice\n          price\n          image {\n            sourceUrl\n          }\n        }\n      }\n    }\n  }\n": types.GetLatestProductsDocument,
    "\n  query GetVariations($id: ID!) {\n    product(id: $id) {\n      ... on VariableProduct {\n        variations {\n          nodes {\n            databaseId\n            name\n            price\n          }\n        }\n      }\n    }\n  }\n": types.GetVariationsDocument,
    "\n  query GetProductReviews($slug: ID!) {\n    product(id: $slug, idType: SLUG) {\n      reviews {\n        nodes {\n          id\n          content\n          rating\n          author {\n            node {\n              name\n            }\n          }\n          date\n        }\n      }\n    }\n  }\n": types.GetProductReviewsDocument,
    "\n  mutation CreateProductReview($input: CreateProductReviewInput!) {\n    createProductReview(input: $input) {\n      comment {\n        id\n        content\n        rating\n      }\n    }\n  }\n": types.CreateProductReviewDocument,
    "\n  query GetAllPaAttributes {\n    allPaColor {\n      nodes {\n        name\n        slug\n      }\n    }\n    allPaSize {\n      nodes {\n        name\n        slug\n      }\n    }\n  }\n": types.GetAllPaAttributesDocument,
    "\n  query GetCurrentUser {\n    viewer {\n      id\n      databaseId\n      email\n      username\n      name\n      firstName\n      lastName\n      roles {\n        nodes {\n          name\n        }\n      }\n    }\n  }\n": types.GetCurrentUserDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation LoginUser($username: String!, $password: String!) {\n    login(\n      input: {\n        clientMutationId: \"login123\"\n        username: $username\n        password: $password\n      }\n    ) {\n      authToken\n      refreshToken\n      user {\n        id\n        email\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LoginUser($username: String!, $password: String!) {\n    login(\n      input: {\n        clientMutationId: \"login123\"\n        username: $username\n        password: $password\n      }\n    ) {\n      authToken\n      refreshToken\n      user {\n        id\n        email\n        username\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RegisterUser(\n    $username: String!\n    $email: String!\n    $password: String!\n  ) {\n    registerUser(\n      input: {\n        username: $username\n        email: $email\n        password: $password\n        clientMutationId: \"register\"\n      }\n    ) {\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RegisterUser(\n    $username: String!\n    $email: String!\n    $password: String!\n  ) {\n    registerUser(\n      input: {\n        username: $username\n        email: $email\n        password: $password\n        clientMutationId: \"register\"\n      }\n    ) {\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateOrder($input: CreateOrderInput!) {\n    createOrder(input: $input) {\n      order {\n        databaseId\n        orderKey\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOrder($input: CreateOrderInput!) {\n    createOrder(input: $input) {\n      order {\n        databaseId\n        orderKey\n        status\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(input: $input) {\n      user {\n        id\n        email\n        username\n        firstName\n        lastName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(input: $input) {\n      user {\n        id\n        email\n        username\n        firstName\n        lastName\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserPassword($id: ID!, $password: String!) {\n    updateUser(input: {\n      id: $id,\n      password: $password\n    }) {\n      user {\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserPassword($id: ID!, $password: String!) {\n    updateUser(input: {\n      id: $id,\n      password: $password\n    }) {\n      user {\n        name\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllCategories {\n    productCategories(first: 100) {\n      nodes {\n        id\n        name\n        slug\n        display\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllCategories {\n    productCategories(first: 100) {\n      nodes {\n        id\n        name\n        slug\n        display\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetOrderById($id: Int) {\n        orders(where: { customerId: $id }) {\n          nodes {\n            orderNumber\n            date\n            status\n            total\n\n            lineItems {\n        nodes {\n          quantity\n          total\n          variation {\n            node {\n              name \n              image{\n                sourceUrl\n              }\n              attributes {\n                nodes {\n                  name     \n                  value   \n                }\n              }\n            }\n          }\n          \n          product {\n            node {\n              name     \n              slug\n              image {\n                sourceUrl\n              }\n            }\n          }\n        }\n      }\n            billing {\n              firstName\n              lastName\n              address1\n              city\n              country\n              email\n              phone\n            }\n          }\n        }\n      }\n"): (typeof documents)["\n      query GetOrderById($id: Int) {\n        orders(where: { customerId: $id }) {\n          nodes {\n            orderNumber\n            date\n            status\n            total\n\n            lineItems {\n        nodes {\n          quantity\n          total\n          variation {\n            node {\n              name \n              image{\n                sourceUrl\n              }\n              attributes {\n                nodes {\n                  name     \n                  value   \n                }\n              }\n            }\n          }\n          \n          product {\n            node {\n              name     \n              slug\n              image {\n                sourceUrl\n              }\n            }\n          }\n        }\n      }\n            billing {\n              firstName\n              lastName\n              address1\n              city\n              country\n              email\n              phone\n            }\n          }\n        }\n      }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetProductsByTag($tag: [String]) {\n    products(first: 4, where: { tagIn: $tag }) {\n      nodes {\n        id\n        name\n        slug\n        description\n        averageRating\n        shortDescription\n        image {\n          sourceUrl\n          altText\n        }\n\n        ... on SimpleProduct {\n          price\n          regularPrice\n          salePrice\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n        }\n        ... on VariableProduct {\n          price\n          regularPrice\n          salePrice\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductsByTag($tag: [String]) {\n    products(first: 4, where: { tagIn: $tag }) {\n      nodes {\n        id\n        name\n        slug\n        description\n        averageRating\n        shortDescription\n        image {\n          sourceUrl\n          altText\n        }\n\n        ... on SimpleProduct {\n          price\n          regularPrice\n          salePrice\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n        }\n        ... on VariableProduct {\n          price\n          regularPrice\n          salePrice\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetProductsByCategory($categoryIn: [String]) {\n    products(where: { categoryIn: $categoryIn }) {\n      nodes {\n        id\n        name\n        slug\n        description\n        averageRating\n        shortDescription\n        image {\n          sourceUrl\n          altText\n        }\n\n        ... on SimpleProduct {\n          price\n          regularPrice\n          salePrice\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n        }\n        ... on VariableProduct {\n          price\n          regularPrice\n          salePrice\n          productCategories {\n            nodes {\n              name\n              slug\n            }\n          }\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n          attributes {\n            nodes {\n              name\n              options\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductsByCategory($categoryIn: [String]) {\n    products(where: { categoryIn: $categoryIn }) {\n      nodes {\n        id\n        name\n        slug\n        description\n        averageRating\n        shortDescription\n        image {\n          sourceUrl\n          altText\n        }\n\n        ... on SimpleProduct {\n          price\n          regularPrice\n          salePrice\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n        }\n        ... on VariableProduct {\n          price\n          regularPrice\n          salePrice\n          productCategories {\n            nodes {\n              name\n              slug\n            }\n          }\n          sku\n          stockStatus\n          productTags {\n            nodes {\n              name\n              slug\n            }\n          }\n          attributes {\n            nodes {\n              name\n              options\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetProductBySlug($slug: ID!) {\n    product(id: $slug, idType: SLUG) {\n      id\n      databaseId\n      name\n      slug\n      description\n      shortDescription\n      averageRating\n      image {\n        sourceUrl\n        altText\n      }\n      ... on VariableProduct {\n        id\n        price\n        regularPrice\n        salePrice\n        sku\n        stockStatus\n        galleryImages {\n          nodes {\n            sourceUrl\n            altText\n          }\n        }\n        variations(first: 100) {\n          nodes {\n            id\n            name\n            price\n            regularPrice\n            description\n            image {\n              altText\n              sourceUrl\n            }\n            sku\n            stockStatus\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductBySlug($slug: ID!) {\n    product(id: $slug, idType: SLUG) {\n      id\n      databaseId\n      name\n      slug\n      description\n      shortDescription\n      averageRating\n      image {\n        sourceUrl\n        altText\n      }\n      ... on VariableProduct {\n        id\n        price\n        regularPrice\n        salePrice\n        sku\n        stockStatus\n        galleryImages {\n          nodes {\n            sourceUrl\n            altText\n          }\n        }\n        variations(first: 100) {\n          nodes {\n            id\n            name\n            price\n            regularPrice\n            description\n            image {\n              altText\n              sourceUrl\n            }\n            sku\n            stockStatus\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLatestProducts {\n    products(first: 10, where: { orderby: { field: DATE, order: DESC } }) {\n      nodes {\n        ... on SimpleProduct {\n          id\n          name\n          date\n          slug\n          price\n          regularPrice\n          image {\n            sourceUrl\n          }\n        }\n        ... on VariableProduct {\n          averageRating\n          id\n          name\n          date\n          slug\n          regularPrice\n          price\n          image {\n            sourceUrl\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLatestProducts {\n    products(first: 10, where: { orderby: { field: DATE, order: DESC } }) {\n      nodes {\n        ... on SimpleProduct {\n          id\n          name\n          date\n          slug\n          price\n          regularPrice\n          image {\n            sourceUrl\n          }\n        }\n        ... on VariableProduct {\n          averageRating\n          id\n          name\n          date\n          slug\n          regularPrice\n          price\n          image {\n            sourceUrl\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetVariations($id: ID!) {\n    product(id: $id) {\n      ... on VariableProduct {\n        variations {\n          nodes {\n            databaseId\n            name\n            price\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetVariations($id: ID!) {\n    product(id: $id) {\n      ... on VariableProduct {\n        variations {\n          nodes {\n            databaseId\n            name\n            price\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetProductReviews($slug: ID!) {\n    product(id: $slug, idType: SLUG) {\n      reviews {\n        nodes {\n          id\n          content\n          rating\n          author {\n            node {\n              name\n            }\n          }\n          date\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductReviews($slug: ID!) {\n    product(id: $slug, idType: SLUG) {\n      reviews {\n        nodes {\n          id\n          content\n          rating\n          author {\n            node {\n              name\n            }\n          }\n          date\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateProductReview($input: CreateProductReviewInput!) {\n    createProductReview(input: $input) {\n      comment {\n        id\n        content\n        rating\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProductReview($input: CreateProductReviewInput!) {\n    createProductReview(input: $input) {\n      comment {\n        id\n        content\n        rating\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllPaAttributes {\n    allPaColor {\n      nodes {\n        name\n        slug\n      }\n    }\n    allPaSize {\n      nodes {\n        name\n        slug\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllPaAttributes {\n    allPaColor {\n      nodes {\n        name\n        slug\n      }\n    }\n    allPaSize {\n      nodes {\n        name\n        slug\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCurrentUser {\n    viewer {\n      id\n      databaseId\n      email\n      username\n      name\n      firstName\n      lastName\n      roles {\n        nodes {\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCurrentUser {\n    viewer {\n      id\n      databaseId\n      email\n      username\n      name\n      firstName\n      lastName\n      roles {\n        nodes {\n          name\n        }\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;